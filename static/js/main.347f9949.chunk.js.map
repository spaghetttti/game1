{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNum","slice","length","calculateWinner","setState","concat","step","current","winner","console","log","status","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wOAKA,SAASA,EAAOC,GAGd,OACE,wBACAC,UAAU,SACVC,QAASF,EAAME,QAFf,SAKGF,EAAMG,Q,IAQLC,E,kKAIJ,SAAaC,GAAI,IAAD,OACd,OAAQ,cAACN,EAAD,CACNI,MAASG,KAAKN,MAAMO,QAAQF,GAC5BH,QAAW,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAIxC,WACE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA3BTC,IAAMC,WAkCpBC,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,QAAU,CAAC,CACTN,QAAUO,MAAM,GAAGC,KAAK,QAE1BC,SAAS,EACTC,QAAS,GARM,E,+CAYnB,SAAYZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,QAAU,GAE3DV,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAE5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBf,QAASA,KAEXS,SAAUV,KAAKM,MAAMI,QACrBC,QAASJ,EAAQM,Y,oBAIrB,SAAOI,GACLjB,KAAKe,SAAS,CACdJ,QAASM,EACTP,QAAUO,EAAK,IAAO,M,oBAIxB,WAAU,IAAD,OACDV,EAAUP,KAAKM,MAAMC,QACrBG,EAAUV,KAAKM,MAAMI,QACrBQ,EAAUX,EAAQP,KAAKM,MAAMK,SAC7BQ,EAASL,EAAgBI,EAAQjB,SACvCmB,QAAQC,IAAIH,EAAQjB,SACpB,IAeIqB,EAfEC,EAAQhB,EAAQiB,KAAI,SAACP,EAAMQ,GAC/B,IAAMC,EAAOD,EACb,aAAeA,EACf,oBACA,OACE,6BACE,wBAAQ7B,QAAS,WACf,EAAK+B,OAAOF,IADd,SAGGC,KAJID,MAyBb,OAXIH,EAFAH,EACET,EACO,kBAGA,kBAKF,kBAAoBA,EAAU,IAAM,KAI7C,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASiB,EAAQjB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK6B,YAAY7B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,8BAAM2B,IACN,6BAAKC,c,GApFIpB,IAAMC,WA2FzB,SAASU,EAAgBb,GAYvB,IAXA,IAAM4B,EAAQ,CACZ,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,IAGD9B,EAAI,EAAGA,EAAI8B,EAAMhB,OAAQd,IAClC,CAAC,IAAD,cACoB8B,EAAM9B,GAD1B,GACS+B,EADT,KACYC,EADZ,KACeC,EADf,KAEE,GAAK/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAErE,OAAO/B,EAAQ6B,GAGnB,OAAO,KAKTG,IAASC,OACP,cAAC7B,EAAD,IACA8B,SAASC,eAAe,W","file":"static/js/main.347f9949.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM  from 'react-dom'\r\nimport './index.css'\r\n\r\n\r\nfunction Square(props) {\r\n\r\n   \r\n  return (\r\n    <button \r\n    className=\"square\"\r\n    onClick={props.onClick}\r\n    >\r\n      {\r\n       props.value \r\n      }\r\n    </button>\r\n  );\r\n}\r\n\r\n  \r\n  \r\n  class Board extends React.Component {\r\n\r\n   \r\n\r\n    renderSquare(i) {\r\n      return (<Square \r\n        value = {this.props.squares[i]}  \r\n        onClick = {() => this.props.onClick(i)} \r\n      />);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        history : [{\r\n          squares : Array(9).fill(null), \r\n        }],\r\n        xIsNext: true,\r\n        stepNum: 0\r\n      }\r\n    }\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNum + 1);\r\n      const current = history[history.length - 1 ];\r\n      const squares = current.squares.slice();\r\n      // const xIsNext = this.state.xIsNext;\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n        }]),\r\n        xIsNext: !this.state.xIsNext,\r\n        stepNum: history.length\r\n      });\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n      stepNum: step,\r\n      xIsNext: (step%2) === 0,\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const xIsNext = this.state.xIsNext;\r\n      const current = history[this.state.stepNum];\r\n      const winner = calculateWinner(current.squares);\r\n      console.log(current.squares); //TEST\r\n      const moves = history.map((step, move) => {\r\n        const desc = move ? \r\n        'Go to move' + move :\r\n        'Go to game start '\r\n        return ( \r\n          <li key={move}>\r\n            <button onClick={() => {\r\n              this.jumpTo(move)\r\n            }}>\r\n              {desc}\r\n            </button>\r\n          </li>\r\n        )\r\n      });\r\n\r\n      let status ;\r\n\r\n      if (winner) {\r\n        if (xIsNext) {\r\n          status = 'The winner is O';\r\n        }\r\n        else {\r\n          status = 'The winner is X'\r\n        }\r\n      }\r\n      else {\r\n        //status = `Next is ${xIsNext ? 'X' : 'O' }` \r\n        status = \"next player : \" + (xIsNext ? \"X\" : \"O\");\r\n      }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0 , 1, 2],\r\n      [3 , 4, 5],\r\n      [6 , 7, 8],\r\n      [0 , 4, 8],\r\n      [6 , 4, 2],\r\n      [0 , 3, 6],\r\n      [1 , 4, 7],\r\n      [2 , 5, 8],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++)\r\n    {\r\n      const [a, b, c] = lines[i];\r\n      if ( squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) \r\n      {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }  \r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}